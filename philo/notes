εάν αποτύχει η δημιουργία:
		if (pthread_create(&(info->philo[idx].philo_thread), NULL, routine, &(info->philo[idx])) != 0)
			return (printf("Failed to create thread\n"), 1);
πρεπει:
να κάνω join για κάθε ένα που δημιουργήθηκε επιτυχώς
να καταστρέψω τα μιουτεξ για κάθε φιλόσοφο
να ελευθερώσω τον κατειλλημένο χώρο



-> Do not test with more than 200 philosophers.
-> Do not test with time_to_die or time_to_eat or time_to_sleep set 
	to values lower than 60 ms.
-> Test 1 800 200 200. The philosopher should not eat and should die.
-> Test 5 800 200 200. No philosopher should die.
-> Test 5 800 200 200 7. No philosopher should die and the simulation should 
	stop when every philosopher has eaten at least 7 times.
-> Test 4 410 200 200. No philosopher should die.
-> Test 4 310 200 100. One philosopher should die.
-> Test with 2 philosophers and check the different times: a death delayed 
	by more than 10 ms is unacceptable.
-> Test with any values of your choice to verify all the requirements.
	Ensure philosophers die at the right time, that they don't steal forks, and so forth.

philo 1 2 3 4 5
forks 0 1 2 3 4

philo_nbr = 5
idx = 5
